// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
	static Array bitMask;

    /** Initializes the library. */
    function void init() {
		var int i;

		let bitMask = Array.new(16);
		
		let i = 1;
		let bitMask[0] = 1;
		while (i < 16) {
			let bitMask[i] = bitMask[i-1] + bitMask[i-1];
			let i = i + 1;
		}
		
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if (x < 0) {
			let x = -x;
		}
		
		return x;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
		var int j, sum, shiftedX;
			
		let j = 0;
		let sum = 0;
		let shiftedX = x;
		while (j < 16) {
			if (bitMask[j] & y) {
				let sum = sum + shiftedX;
			}
			
			let shiftedX = shiftedX + shiftedX;
			let j = j + 1;
		}
		
		return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
		var int q;

		if (y = 0) {
			do Sys.error(3); // Math.divide: Division by zero
		}
	
		if (x < 0) {
		  return -Math.divide(-x, y);
		}

		if (y < 0) {
		  return -Math.divide(x, -y);
		}
    
		if (y > x) {
			return 0;
		}
		
		let q = Math.divide(x, y + y);

		if ((x - (2*q*y)) < y) {
			return q + q;
		} else {
			return q + q + 1;
		}
	}

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int low, mid, high;
		
		if (x < 0) {
			do Sys.error(4); // Math.sqrt: Cannot compute square root of a negative number
		}
		
		let low = 0;
		let high = 182;
		
		// Do binary search.
		while (high - low > 1) {
		
			// get mid point.
			let mid = (low + high) / 2;
			
			// adjust high and low based on square of mid point
			if (mid * mid > x) {
				let high = mid;
			} else {
				let low = mid;
			}
		}
		
		return low;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if (a > b) {
			return a;
		} else {
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if (a < b) {
			return a;
		} else {
			return b;
		}
    }
}
